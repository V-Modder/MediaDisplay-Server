import sysimport timeimport jsonimport loggingfrom datetime import datetimefrom PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QStackedWidget, QWidget, QPushButton, QProgressBarfrom PyQt5.QtGui import QIcon, QPixmap, QFont, QMouseEventfrom PyQt5 import QtGuifrom PyQt5 import QtCorefrom PyQt5.QtCore import pyqtSignalfrom pystream.webservice import WebSocketServer, Metricfrom pystream.analoggaugewidget import AnalogGaugeWidget from pystream.gradiant_progressbar import GradiantProgressBardef main():    app = QApplication(sys.argv)    global window     window = PyStream()    sys.exit(app.exec_())class PyStream(QMainWindow):    receive_signal = pyqtSignal(Metric)    def __init__(self):        super().__init__()        self.__server = WebSocketServer(self)        self.__server.start()        self.initUI()    def initUI(self):        logging.info("[GUI] Init main frame")        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)        self.setGeometry(0, 0, 800, 480)        self.setWindowTitle("PyAlarm")        self.setWindowIcon(QIcon("pystream/pyalarm.png"))        self.is_updating = False        self.stack = QStackedWidget(self)        self.stack.setGeometry(0, 0, 800, 480)        self.panel_1 = QWidget()        self.panel_2 = QWidget()        self.panel_3 = QWidget()        self.stack.addWidget(self.panel_1)        self.stack.addWidget(self.panel_2)        self.stack.addWidget(self.panel_3)        #####################        ##### Panel 1        #self.panel_1.setStyleSheet("background-color: #000000")        background_1 = QLabel(self.panel_1)        background_1.setGeometry(0, 0, 800, 480)        background_1.setStyleSheet("background-image: url(pystream/page_1.jpg);")        self.nextpage_button = QPushButton(self.panel_1)        self.nextpage_button.setStyleSheet("background-image: url(pystream/arrow_right.png);")        self.nextpage_button.clicked.connect(lambda:self.__change_page("Forward"))        self.nextpage_button.setGeometry(774, 227, 26, 26)        self.nextpage_button.setFlat(True)        self.gauge_cpu_1 = self.__create_gauge(self.panel_1, 95, 67)        self.gauge_cpu_2 = self.__create_gauge(self.panel_1, 335, 67)        self.gauge_cpu_3 = self.__create_gauge(self.panel_1, 580, 67)        self.gauge_cpu_4 = self.__create_gauge(self.panel_1, 95, 230)        self.gauge_cpu_5 = self.__create_gauge(self.panel_1, 335, 230)        self.gauge_cpu_6 = self.__create_gauge(self.panel_1, 560, 230)        self.label_cpu_1 = self.__create_label(self.panel_1, 135, 164, text="--°C")        self.label_cpu_2 = self.__create_label(self.panel_1, 380, 164, text="--°C")        self.label_cpu_3 = self.__create_label(self.panel_1, 620, 164, text="--°C")        self.label_cpu_4 = self.__create_label(self.panel_1, 135, 333, text="--°C")        self.label_cpu_5 = self.__create_label(self.panel_1, 380, 333, text="--°C")        self.label_cpu_6 = self.__create_label(self.panel_1, 620, 333, text="--°C")        self.__create_label(self.panel_1, 32, 384, text="GPU", font_size=20, color="#FFFFFF")        self.label_gpu_temp = self.__create_label(self.panel_1, 29, 417, text="--°C", font_size=15, color="#FFFFFF")        self.progress_gpu_load = self.__create_progressbar(self.panel_1, 95, 390, 174, 20)        self.progress_gpu_mem_load = self.__create_progressbar(self.panel_1, 95, 420, 174, 20)        self.__create_label(self.panel_1, 275, 384, text="Network", font_size=20, color="#FFFFFF")        self.__create_label(self.panel_1, 365, 390, text="Down", font_size=15, color="#FFFFFF")        self.__create_label(self.panel_1, 365, 414, text="Up", font_size=15, color="#FFFFFF")        self.label_net_down = self.__create_label(self.panel_1, 430, 390, text="0", font_size=15, color="#FFFFFF")        self.label_net_up = self.__create_label(self.panel_1, 430, 414, text="0", font_size=15, color="#FFFFFF")        self.__create_label(self.panel_1, 546, 379, text="Memory", font_size=20, color="#FFFFFF")        self.progress_mem_load = self.__create_progressbar(self.panel_1, 551, 407, 203, 34)        #####################        ##### Panel 2        background_2 = QLabel(self.panel_2)        background_2.setGeometry(0, 0, 800, 480)        background_2.setStyleSheet("background-image: url(pystream/page_2.jpg);")        self.prevpage_button = QPushButton(self.panel_2)        self.prevpage_button.setStyleSheet("background-image: url(pystream/arrow_left.png);")        self.prevpage_button.clicked.connect(lambda:self.__change_page("Backward"))        self.prevpage_button.setGeometry(0, 227, 26, 26)        self.prevpage_button.setFlat(True)        #####################        ##### Panel 3        self.panel_3.setStyleSheet("background-image: url(pystream/pyalarm.png);")        self.label_room_temp = self.__create_label(self, 110, 0, text="--°C", color="#FFFFFF")        self.label_time = self.__create_label(self, 590, 0, text="00:00", font_size=15, color="#FFFFFF")        self.restore_gui()        #self.setCursor(QtCore.Qt.BlankCursor)        logging.info("[GUI] Init done")        self.receive_signal.connect(self.receive_gui)        self.show()    def __create_gauge(self, parent, x ,y):        gauge = AnalogGaugeWidget(parent)        gauge.set_enable_fine_scaled_marker(False)        gauge.set_enable_big_scaled_grid(False)        gauge.set_enable_ScaleText(False)        gauge.set_enable_CenterPoint(False)        gauge.set_enable_Needle_Polygon(False)        gauge.set_enable_barGraph(False)        gauge.set_start_scale_angle(165)        gauge.set_total_scale_angle_size(210)        gauge.set_gauge_color_inner_radius_factor(600)        gauge.set_MaxValue(100)        gauge.setGeometry(x, y, 130, 130)        gauge.update_value(50)        gauge.set_DisplayValueColor(0, 255, 255)        return gauge    def __create_label(self, parent, x, y, text="", font_size=15, color="#00FFFF"):        label = QLabel(parent)        label.setText(text) #"--°C"        font = QFont("Decorative", font_size)        font.setBold(True)        label.setFont(font)        label.setStyleSheet("color: %s;" % color);        label.move(x, y)        return label    def __create_progressbar(self, parent, x, y, width, height):        progress = GradiantProgressBar(parent)        progress.setFormat("")        progress.setValue(50)        progress.setMaximum(100)        progress.setGeometry(x, y, width, height)        return progress    def __change_page(self, direction):        if direction == "Forward":            if self.stack.currentIndex() < self.stack.count() - 2:                 self.stack.setCurrentIndex(self.stack.currentIndex() + 1)        elif direction == "Backward":            if self.stack.currentIndex() > 0:                 self.stack.setCurrentIndex(self.stack.currentIndex() - 1)    def __windowClicked(self, event: QMouseEvent):        x = event.x()        y = event.y()        msgObj = {"action": "click", "x": x, "y": y}        msg = json.dumps(msgObj)        self.__server.broadcast(msg)    def udpate_gui(self, data):
        self.gauge_cpu_1.update_value(data.cpus[0].load)
        self.label_cpu_1.setText("%1.0f°C" % data.cpus[0].temperature)
        self.gauge_cpu_2.update_value(data.cpus[1].load)
        self.label_cpu_2.setText("%1.0f°C" % data.cpus[1].temperature)
        self.gauge_cpu_3.update_value(data.cpus[2].load)
        self.label_cpu_3.setText("%1.0f°C" % data.cpus[2].temperature)
        self.gauge_cpu_4.update_value(data.cpus[3].load)
        self.label_cpu_4.setText("%1.0f°C" % data.cpus[3].temperature)
        self.gauge_cpu_5.update_value(data.cpus[4].load)
        self.label_cpu_5.setText("%1.0f°C" % data.cpus[4].temperature)
        self.gauge_cpu_6.update_value(data.cpus[5].load) 
        self.label_cpu_6.setText("%1.0f°C" % data.cpus[5].temperature) 
        
        self.progress_mem_load.setValue(data.memory_load)
        
        self.label_gpu_temp.setText("%1.0f°C" % data.gpu.temperature)
        self.progress_gpu_load.setValue(data.gpu.load)
        self.progress_gpu_mem_load.setValue(data.gpu.memory_load)  
        
        self.label_net_down.setText(data.network.down)
        self.label_net_up.setText(data.network.up)
        
        self.label_room_temp.setText("%1.0f°C" % data.room_temperature)
        self.label_time.setText(data.time)

    def receive_gui(self, data:Metric):        if data is None:            logging.info("[GUI] Restoring initial image")            self.restore_gui()        else:            if self.is_updating == False:                self.is_updating = True                start_time = time.time()                try:                    self.udpate_gui(data)                    self.enable_gui()                except Exception as e:                    print("Error: " + e)                finally:                    self.is_updating = False                end_time = time.time()                time_lapsed = (end_time - start_time) * 1000                print("Time lapsed: " + str(time_lapsed) + "ms")            else:                 print("Gui is locked")    def receive(self, data:Metric):        self.receive_signal.emit(data)    def enable_gui(self):        if self.stack.currentIndex() == 2:                self.stack.setCurrentIndex(0)    def restore_gui(self):        self.stack.setCurrentIndex(2)